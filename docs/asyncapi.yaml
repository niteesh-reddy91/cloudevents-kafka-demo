# AsyncAPI specification for CloudEvent Envelope with PersonWorker data
asyncapi: 3.0.0

# Basic information about your API
info:
  title: CloudEvent PersonWorker API
  version: 2.0.0
  description: |
    Event-driven API using Kafka with CloudEvents and Avro serialization for PersonWorker domain.
    Uses CloudEventEnvelope structure with comprehensive validation rules and Schema Registry integration.
    Supports PersonWorker lifecycle events (Created, Updated, Deleted) with custom validation logic.
  contact:
    name: Data Platform Team
    email: dataplatform@example.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0

# Default content type for messages (Avro binary)
defaultContentType: application/octet-stream

# Server configurations - your Kafka and Schema Registry setup
servers:
  kafka:
    host: localhost:9092
    protocol: kafka
    description: Local Kafka broker running on Docker Desktop
    bindings:
      kafka:
        schemaRegistryUrl: http://localhost:8081
        schemaRegistryVendor: confluent
  
  schema-registry:
    host: localhost:8081
    protocol: http
    description: Confluent Schema Registry for Avro schema management

# Channels represent your Kafka topics
channels:
  demo-topic:
    address: demo-topic
    description: |
      Main topic for PersonWorker lifecycle events. Handles creation, updates, and deletion 
      of PersonWorker entities using CloudEventEnvelope structure with Avro serialization.
    messages:
      personWorkerEvent:
        $ref: '#/components/messages/personWorkerEvent'
    bindings:
      kafka:
        partitions: 3
        replicas: 1
        topicConfiguration:
          cleanup.policy: ["delete"]
          retention.ms: 604800000

  person-worker-events:
    address: person-worker-events
    description: |
      Dedicated topic for PersonWorker events. Used in CloudEventEnvelope.topic field 
      for routing and validation purposes.
    messages:
      personWorkerEvent:
        $ref: '#/components/messages/personWorkerEvent'
    bindings:
      kafka:
        partitions: 3
        replicas: 1
        topicConfiguration:
          cleanup.policy: ["delete"]
          retention.ms: 604800000

  order-events:
    address: order-events
    description: Topic for order-related events (configured in validation rules)
    
  inventory-events:
    address: inventory-events
    description: Topic for inventory-related events (configured in validation rules)

# Operations define what your services do
operations:
  # Producer Service Contracts
  publishPersonWorkerCreated:
    action: send
    channel:
      $ref: '#/channels/demo-topic'
    summary: Producer publishes PersonWorker creation events
    description: |
      **Service**: App.java (Producer Service)
      **Business Context**: When a new PersonWorker is onboarded to the system
      
      This operation is triggered when:
      - A new employee joins the company
      - HR system creates a new worker profile
      - User registration process completes
      
      **Data Flow**:
      1. Producer validates PersonWorker data against Avro schema validation rules
      2. Creates CloudEvent envelope with type "com.example.PersonWorker.Created"
      3. Serializes using Avro and publishes to demo-topic
      4. Message is routed to person-worker-events for downstream processing
      
      **SLA**: Messages published within 100ms of data validation
      **Error Handling**: Invalid data is rejected before publishing
    bindings:
      kafka:
        clientId: 
          type: string
          const: "cloudevent-producer"
        groupId:
          type: string  
          const: "producer-group"
    messages:
      - $ref: '#/channels/demo-topic/messages/personWorkerEvent'
    traits:
      - $ref: '#/components/operationTraits/cloudEventPublisher'

  publishPersonWorkerUpdated:
    action: send
    channel:
      $ref: '#/channels/demo-topic'
    summary: Producer publishes PersonWorker update events
    description: |
      **Service**: App.java (Producer Service)
      **Business Context**: When existing PersonWorker information is modified
      
      This operation is triggered when:
      - Employee information is updated (contact details, status, etc.)
      - HR system modifies worker profile
      - Self-service profile updates by employees
      
      **Business Rules**:
      - Only active employees can be updated
      - Age modifications require manager approval
      - Email changes trigger verification workflow
      
      **Downstream Impact**: 
      - Payroll systems need to update records
      - Access control systems may need permission updates
      - Notification service sends update confirmations
    bindings:
      kafka:
        clientId: 
          type: string
          const: "cloudevent-producer"
        groupId:
          type: string  
          const: "producer-group"
    messages:
      - $ref: '#/channels/demo-topic/messages/personWorkerEvent'
    traits:
      - $ref: '#/components/operationTraits/cloudEventPublisher'

  publishPersonWorkerDeleted:
    action: send
    channel:
      $ref: '#/channels/demo-topic'
    summary: Producer publishes PersonWorker deletion events
    description: |
      **Service**: App.java (Producer Service)
      **Business Context**: When a PersonWorker is removed from the system
      
      This operation is triggered when:
      - Employee termination or resignation
      - Contract expiration for temporary workers
      - Data privacy compliance (GDPR right to be forgotten)
      
      **Business Rules**:
      - Only HR managers can trigger deletion events
      - Final payroll must be processed before deletion
      - Archive certain data before full deletion
      
      **Compliance**: Ensures audit trail for terminated employees
    bindings:
      kafka:
        clientId: 
          type: string
          const: "cloudevent-producer"
        groupId:
          type: string  
          const: "producer-group"
    messages:
      - $ref: '#/channels/demo-topic/messages/personWorkerEvent'
    traits:
      - $ref: '#/components/operationTraits/cloudEventPublisher'

  # Consumer Service Contracts
  processPersonWorkerEvents:
    action: receive
    channel:
      $ref: '#/channels/demo-topic'
    summary: HR System processes PersonWorker lifecycle events
    description: |
      **Service**: HR Management System (Consumer)
      **Business Context**: Maintains master employee records and triggers HR workflows
      
      **Processing Logic**:
      - Created: Initiates onboarding workflow, creates employee ID, sends welcome email
      - Updated: Updates master records, validates changes, triggers dependent system updates
      - Deleted: Archives employee data, terminates access, updates payroll systems
      
      **SLA**: Process events within 30 seconds
      **Error Handling**: Dead letter queue for processing failures
      **Idempotency**: Uses CloudEvent ID to prevent duplicate processing
    bindings:
      kafka:
        clientId:
          type: string
          const: "hr-system-consumer"
        groupId:
          type: string
          const: "hr-processing-group"
    messages:
      - $ref: '#/channels/demo-topic/messages/personWorkerEvent'
    traits:
      - $ref: '#/components/operationTraits/cloudEventConsumer'

  syncPayrollSystem:
    action: receive
    channel:
      $ref: '#/channels/demo-topic'
    summary: Payroll System syncs employee data
    description: |
      **Service**: Payroll Processing System (Consumer)
      **Business Context**: Maintains payroll records in sync with employee changes
      
      **Processing Logic**:
      - Created: Sets up new employee in payroll system with default salary structure
      - Updated: Updates employee details, recalculates benefits if age/status changed
      - Deleted: Processes final payroll, generates termination reports
      
      **Business Rules**:
      - Only processes events for employees with status 'active'
      - Age changes may affect benefits calculation
      - Status changes from 'active' to 'inactive' trigger special handling
      
      **Integration**: Updates external payroll vendor systems via API
    bindings:
      kafka:
        clientId:
          type: string
          const: "payroll-system-consumer"
        groupId:
          type: string
          const: "payroll-sync-group"
    messages:
      - $ref: '#/channels/demo-topic/messages/personWorkerEvent'
    traits:
      - $ref: '#/components/operationTraits/cloudEventConsumer'

  updateAccessControl:
    action: receive
    channel:
      $ref: '#/channels/demo-topic'
    summary: Access Control System manages employee permissions
    description: |
      **Service**: Identity & Access Management System (Consumer)
      **Business Context**: Manages employee access rights and security permissions
      
      **Processing Logic**:
      - Created: Creates user accounts, assigns default permissions based on role
      - Updated: Updates user profiles, adjusts permissions if status changed
      - Deleted: Disables accounts immediately, revokes all access permissions
      
      **Security Requirements**:
      - Deleted events are processed with highest priority (within 5 seconds)
      - Status changes to 'inactive' immediately suspend access
      - All changes are logged for security auditing
      
      **Downstream Systems**: Active Directory, VPN access, building access cards
    bindings:
      kafka:
        clientId:
          type: string
          const: "access-control-consumer"
        groupId:
          type: string
          const: "access-management-group"
    messages:
      - $ref: '#/channels/demo-topic/messages/personWorkerEvent'
    traits:
      - $ref: '#/components/operationTraits/cloudEventConsumer'

  sendNotifications:
    action: receive
    channel:
      $ref: '#/channels/demo-topic'
    summary: Notification Service sends employee communication
    description: |
      **Service**: Notification & Communication System (Consumer)
      **Business Context**: Sends appropriate notifications for employee lifecycle events
      
      **Processing Logic**:
      - Created: Sends welcome email, onboarding checklist, manager notifications
      - Updated: Sends confirmation emails for profile changes, alerts for critical updates
      - Deleted: Sends farewell communications, final document delivery
      
      **Business Rules**:
      - Only sends external communications for employees with valid email addresses
      - Manager notifications required for all employee changes
      - Sensitive updates (salary, status) have restricted notification lists
      
      **Channels**: Email, SMS, Slack notifications, mobile app push notifications
    bindings:
      kafka:
        clientId:
          type: string
          const: "notification-service-consumer"
        groupId:
          type: string
          const: "notification-delivery-group"
    messages:
      - $ref: '#/channels/demo-topic/messages/personWorkerEvent'
    traits:
      - $ref: '#/components/operationTraits/cloudEventConsumer'

# Reusable components
components:
  # Message definitions
  messages:
    personWorkerEvent:
      name: PersonWorkerEvent
      title: PersonWorker Lifecycle Event
      summary: CloudEventEnvelope containing PersonWorker data
      description: |
        A CloudEvent envelope containing PersonWorker lifecycle data (Created, Updated, Deleted).
        Uses comprehensive validation rules for data integrity and follows CloudEvents specification.
        
        The envelope contains:
        - CloudEvent metadata (id, source, type, subject, time, clientid)
        - Topic routing information
        - PersonWorker data with validation rules
      contentType: application/octet-stream
      headers:
        $ref: '#/components/schemas/kafkaHeaders'
      payload:
        schemaFormat: 'application/vnd.apache.avro;version=1.9.0'
        schema:
          $ref: 'http://localhost:8081/subjects/demo-topic-value/versions/2/schema'
      examples:
        - name: PersonWorker Created Event
          summary: Example of a PersonWorker creation event
          payload:
            id: "550e8400-e29b-41d4-a716-446655440000"
            source: "user-service"
            type: "com.example.PersonWorker.Created"
            subject: "/example/udp/personworker"
            time: "2025-06-10T10:30:00Z"
            clientid: "550e8400-e29b-41d4-a716-446655440001"
            topic: "person-worker-events"
            data:
              uuid: "550e8400-e29b-41d4-a716-446655440002"
              firstName: "John"
              lastName: "Doe"
              age: 30
              status: "active"
              email: "john.doe@example.com"
              sex: "MALE"
              birthdate: "1993-06-09"
        
        - name: PersonWorker Updated Event
          summary: Example of a PersonWorker update event
          payload:
            id: "550e8400-e29b-41d4-a716-446655440003"
            source: "user-service"
            type: "com.example.PersonWorker.Updated"
            subject: "/example/udp/personworker"
            time: "2025-06-10T11:15:00Z"
            clientid: "550e8400-e29b-41d4-a716-446655440004"
            topic: "person-worker-events"
            data:
              uuid: "550e8400-e29b-41d4-a716-446655440002"
              firstName: "Jane"
              lastName: "Smith"
              age: 25
              status: "active"
              email: "jane.smith@example.com"
              sex: "FEMALE"
              birthdate: "1998-03-15"

  # Schema definitions
  schemas:
    kafkaHeaders:
      type: object
      description: Standard Kafka message headers
      properties:
        content-type:
          type: string
          description: Content type of the message
          example: "application/octet-stream"
    
    cloudEventEnvelope:
      type: object
      description: |
        CloudEventEnvelope schema as defined in combined.avsc.
        Contains CloudEvent metadata plus routing information.
        
        Note: This represents the logical structure. The actual Avro schema 
        is registered in Schema Registry at demo-topic-value subject version 2.
      properties:
        id:
          type: string
          description: Unique identifier for the event
          minLength: 5
          maxLength: 100
          pattern: "^[a-zA-Z0-9-_]+$"
          example: "550e8400-e29b-41d4-a716-446655440000"
        source:
          type: string
          description: Source of the event
          enum: ["user-service", "order-service", "inventory-service", "notification-service"]
          example: "user-service"
        type:
          type: string
          description: Type of event following specific pattern
          pattern: "^com\\.example\\.[A-Za-z]+\\.(Created|Updated|Deleted)$"
          example: "com.example.PersonWorker.Created"
        subject:
          type: string
          description: Subject of the event
          minLength: 10
          maxLength: 200
          example: "/example/udp/personworker"
        time:
          type: string
          format: date-time
          description: Timestamp when event occurred
          example: "2025-06-10T10:30:00Z"
        clientid:
          type: string
          format: uuid
          description: Client identifier (UUID format)
          example: "550e8400-e29b-41d4-a716-446655440001"
        topic:
          type: string
          description: Kafka topic for routing
          enum: ["person-worker-events", "order-events", "inventory-events"]
          minLength: 5
          maxLength: 50
          example: "person-worker-events"
        data:
          oneOf:
            - type: "null"
            - $ref: '#/components/schemas/personWorker'
          description: PersonWorker data (nullable)
      required:
        - id
        - source
        - type
        - subject
        - time
        - clientid
        - topic

    personWorker:
      type: object
      description: |
        PersonWorker data model with comprehensive validation rules.
        Represents a person/worker entity in the system.
      properties:
        uuid:
          type: string
          format: uuid
          description: UUID as string (16-byte UUID)
          example: "550e8400-e29b-41d4-a716-446655440002"
        firstName:
          type: string
          description: First name of the person
          minLength: 2
          maxLength: 50
          pattern: "^[a-zA-Z\\s'-]+$"
          example: "John"
        lastName:
          type: string
          description: Last name of the person
          minLength: 2
          maxLength: 50
          pattern: "^[a-zA-Z\\s'-]+$"
          example: "Doe"
        age:
          type: integer
          description: Age of person (must be between 18 and 65)
          minimum: 18
          maximum: 65
          example: 30
        status:
          type: string
          description: Account status
          enum: ["active", "inactive", "pending"]
          default: "active"
          example: "active"
        email:
          type: string
          format: email
          description: Email address (nullable)
          nullable: true
          example: "john.doe@example.com"
        sex:
          type: string
          description: Biological sex or gender identity
          enum: ["MALE", "FEMALE", "OTHER"]
          example: "MALE"
        birthdate:
          type: string
          description: Birth date as string
          example: "1993-06-09"
      required:
        - uuid
        - firstName
        - lastName
        - age
        - sex
        - birthdate

    validationRules:
      type: object
      description: |
        Custom validation rules applied by the producer service.
        These rules are extracted from the Avro schema and enforced before publishing.
      properties:
        schemaVersion:
          type: string
          description: Version of the schema used for validation
          example: "2"
        validationLevel:
          type: string
          enum: [strict, lenient]
          description: Level of validation applied
          default: "strict"
        validatedFields:
          type: array
          description: List of fields that undergo validation
          items:
            type: string
          example: ["id", "source", "type", "subject", "time", "clientid", "topic", "data"]
        allowedSources:
          type: array
          description: Allowed values for source field
          items:
            type: string
          example: ["user-service", "order-service", "inventory-service", "notification-service"]
        allowedTopics:
          type: array
          description: Allowed values for topic field
          items:
            type: string
          example: ["person-worker-events", "order-events", "inventory-events"]
        avroSchemaLocation:
          type: string
          description: Location of the Avro schema file
          example: "src/main/avro/combined.avsc"
        schemaRegistrySubject:
          type: string
          description: Schema Registry subject name
          example: "demo-topic-value"
        schemaRegistryVersion:
          type: integer
          description: Schema Registry version
          example: 2

  # Operation traits for reusable patterns
  operationTraits:
    cloudEventPublisher:
      description: |
        Common traits for all CloudEvent publishing operations.
        
        **Producer Configuration**:
        - Uses idempotent producer settings
        - Retry configuration for reliability
        - Compression enabled for efficiency
        - All acknowledgments required for durability
      summary: CloudEvent publisher operation pattern
    
    cloudEventConsumer:
      description: |
        Common traits for all CloudEvent consuming operations.
        
        **Consumer Configuration**:
        - Reads from earliest offset for complete processing
        - Manual commit for exactly-once processing
        - Appropriate session timeout for reliability
        - Batched processing for efficiency
      summary: CloudEvent consumer operation pattern